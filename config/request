import axios from 'axios'
import {
  Message
} from 'element-ui'
import store from '@/store'
import {
  getToken
} from '@/utils/auth'
import merge from 'lodash/merge'
// import router from '@/router'
import qs from 'qs'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // api 的 base_url
  withCredentials: true, // 跨域请求时发送 cookies
  timeout: 3 * 60 * 1000, // request timeout
  headers: {
    'Content-Type': 'application/json; charset=utf-8'
  }
})

// request interceptor
service.interceptors.request.use(
  config => {
    // Do something before request is sent
    if (store.getters.token) {
      // 让每个请求携带token-- ['token']为自定义key 请根据实际情况自行修改
      config.headers['token'] = getToken()
    }
    return config
  },
  error => {
    // Do something with request error
    console.log(error) // for debug
    return Promise.reject(error)
  }
)
/**
 * 响应拦截
 */
service.interceptors.response.use(response => {
  if (response.data && response.data.code === 401) { // 401, token失效
    console.warn('token invalid')
    Message({
      message: response.data.msg,
      type: 'error',
      duration: 5 * 1000
    })
    // setTimeout(function() {
    store.dispatch('user/resetToken').then(() => {
      location.reload() // 为了重新实例化vue-router对象 避免bug
    })
    // router.push({
    //   name: 'login'
    // })
    // }, 2000);
  }
  if (response.data && response.data.code === 500) {
    Message({
      message: response.data.msg,
      type: 'error',
      duration: 5 * 1000
    })
  }
  return response
}, error => {
  return Promise.reject(error)
})
// // response interceptor
// service.interceptors.response.use(
//   response => {
//     const res = response.data
//     if (res.code !== 0) {
//       var errormsg = res.msg
//       console.error(errormsg)
//       Message({
//         message: errormsg,
//         type: 'error',
//         duration: 5 * 1000
//       })
//       // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;
//       if (res.code === 50008 || res.code === 50012 || res.code === 50014) {
//         // 请自行在引入 MessageBox
//         // import { Message, MessageBox } from 'element-ui'
//         MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {
//           confirmButtonText: '重新登录',
//           cancelButtonText: '取消',
//           type: 'warning'
//         }).then(() => {
//           store.dispatch('user/resetToken').then(() => {
//             location.reload() // 为了重新实例化vue-router对象 避免bug
//           })
//         })
//       }
//       return Promise.reject('error')
//     } else {
//       return response
//     }
//   },
//   error => {
//     console.log('err' + error) // for debug
//     Message({
//       message: error.message,
//       type: 'error',
//       duration: 5 * 1000
//     })
//     return Promise.reject(error)
//   }
// )

service.get = (url, query) => {
  return service.request({
    url: url,
    method: 'get',
    params: query || {}
  })
}

service.post = (url, data) => {
  return service.request({
    url: url,
    method: 'post',
    data
  })
}

service.put = (url, data) => {
  return service.request({
    url: url,
    method: 'put',
    data
  })
}

service.del = (url) => {
  return service.request({
    url: url,
    method: 'delete'
  })
}

service.getUrl = (url) => {
  return process.env.VUE_APP_BASE_API + url
}

service.adornUrl = (url) => {
  return url
}
/**
 * get请求参数处理
 * @param {*} params 参数对象
 * @param {*} openDefultParams 是否开启默认参数?
 */
service.adornParams = (params = {}, openDefultParams = true) => {
  var defaults = {
    't': new Date().getTime()
  }
  return openDefultParams ? merge(defaults, params) : params
}

/**
 * post请求数据处理
 * @param {*} data 数据对象
 * @param {*} openDefultdata 是否开启默认数据?
 * @param {*} contentType 数据格式
 *  json: 'application/json; charset=utf-8'
 *  form: 'application/x-www-form-urlencoded; charset=utf-8'
 */
service.adornData = (data = {}, openDefultdata = true, contentType = 'json') => {
  var defaults = {
    't': new Date().getTime()
  }
  data = openDefultdata ? merge(defaults, data) : data
  return contentType === 'json' ? JSON.stringify(data) : qs.stringify(data)
}

export default service